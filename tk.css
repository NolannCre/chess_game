<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mon Organisateur</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .controls {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .form-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
            margin-bottom: 15px;
        }

        .form-group input, .form-group select {
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-danger {
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            color: white;
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }

        .schedule-grid {
            display: grid;
            grid-template-columns: 80px repeat(7, 1fr);
            gap: 2px;
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .time-header, .day-header {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 15px 10px;
            text-align: center;
            font-weight: 600;
            border-radius: 8px;
        }

        .time-slot {
            background: #f8f9fa;
            padding: 10px 5px;
            text-align: center;
            font-size: 12px;
            font-weight: 500;
            border-radius: 6px;
            color: #666;
        }

        .schedule-cell {
            background: white;
            min-height: 60px;
            border-radius: 8px;
            position: relative;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .schedule-cell:hover {
            border-color: #667eea;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
        }

        .event {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 8px;
            margin: 2px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: absolute;
            left: 2px;
            right: 2px;
            top: 2px;
            overflow: hidden;
            z-index: 5;
        }

        .event:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 10;
        }

        .event.completed {
            opacity: 0.6;
            background: linear-gradient(45deg, #28a745, #20c997) !important;
        }

        .event.completed .event-title {
            text-decoration: line-through;
        }

        .event.next-event {
            animation: pulse 2s infinite;
            border: 2px solid #ffd700;
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.5);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .event-title {
            font-weight: 600;
            margin-bottom: 2px;
        }

        .event-time {
            font-size: 10px;
            opacity: 0.9;
        }

        .event-checkbox {
            position: absolute;
            top: 4px;
            left: 4px;
            width: 14px;
            height: 14px;
            cursor: pointer;
            z-index: 10;
        }

        .event-content {
            margin-left: 20px;
        }

        .event-delete {
            position: absolute;
            top: 2px;
            right: 4px;
            background: rgba(255, 107, 107, 0.8);
            color: white;
            border: none;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 10px;
            cursor: pointer;
            display: none;
            z-index: 10;
        }

        .next-event-indicator {
            background: rgba(255, 215, 0, 0.95);
            color: #333;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            box-shadow: 0 4px 16px rgba(255, 215, 0, 0.3);
            backdrop-filter: blur(10px);
            text-align: center;
            font-weight: 600;
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { box-shadow: 0 4px 16px rgba(255, 215, 0, 0.3); }
            to { box-shadow: 0 6px 20px rgba(255, 215, 0, 0.6); }
        }

        .next-event-indicator .next-event-title {
            font-size: 1.1rem;
            margin-bottom: 5px;
        }

        .next-event-indicator .next-event-time {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .event:hover .event-delete {
            display: block;
        }

        .days-selector {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .days-selector label {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 6px;
            transition: all 0.3s ease;
            background: #f8f9fa;
            border: 2px solid transparent;
        }

        .days-selector label:hover {
            background: #e9ecef;
        }

        .days-selector input[type="checkbox"]:checked + span,
        .days-selector label:has(input[type="checkbox"]:checked) {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
        }

        .days-selector input[type="checkbox"] {
            margin: 0;
        }

        .color-picker {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 3px solid transparent;
            transition: all 0.3s ease;
        }

        .color-option:hover, .color-option.selected {
            border-color: #333;
            transform: scale(1.1);
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        @media (max-width: 768px) {
            .schedule-grid {
                font-size: 12px;
            }
            
            .form-group {
                flex-direction: column;
                align-items: stretch;
            }
            
            .form-group input, .form-group select {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📅 Mon Organisateur</h1>
            <p>Planifiez votre semaine efficacement</p>
        </div>

        <div class="controls">
            <div class="form-group">
                <input type="text" id="eventTitle" placeholder="Titre de l'événement" required>
                <input type="time" id="startTime" required>
                <input type="time" id="endTime" required>
                <button class="btn btn-primary" onclick="addEvent()">Ajouter</button>
            </div>
            
            <div class="form-group">
                <label style="font-weight: 600; margin-right: 15px;">Sélectionner les jours :</label>
                <div class="days-selector">
                    <label><input type="checkbox" value="lundi"> Lundi</label>
                    <label><input type="checkbox" value="mardi"> Mardi</label>
                    <label><input type="checkbox" value="mercredi"> Mercredi</label>
                    <label><input type="checkbox" value="jeudi"> Jeudi</label>
                    <label><input type="checkbox" value="vendredi"> Vendredi</label>
                    <label><input type="checkbox" value="samedi"> Samedi</label>
                    <label><input type="checkbox" value="dimanche"> Dimanche</label>
                </div>
            </div>
            
            <div class="color-picker">
                <div class="color-option selected" style="background: linear-gradient(45deg, #667eea, #764ba2)" data-color="default"></div>
                <div class="color-option" style="background: linear-gradient(45deg, #ff6b6b, #ee5a52)" data-color="red"></div>
                <div class="color-option" style="background: linear-gradient(45deg, #51cf66, #40c057)" data-color="green"></div>
                <div class="color-option" style="background: linear-gradient(45deg, #ffd43b, #fab005)" data-color="yellow"></div>
                <div class="color-option" style="background: linear-gradient(45deg, #339af0, #228be6)" data-color="blue"></div>
                <div class="color-option" style="background: linear-gradient(45deg, #845ef7, #7048e8)" data-color="purple"></div>
            </div>
            
            <div style="margin-top: 15px;">
                <button class="btn btn-danger" onclick="clearSchedule()">Effacer tout</button>
                <button class="btn btn-primary" onclick="saveSchedule()" style="margin-left: 10px;">💾 Sauvegarder</button>
                <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()" style="margin-left: 10px;">📁 Charger</button>
                <input type="file" id="fileInput" accept=".json" style="display: none;" onchange="loadSchedule(event)">
            </div>
        </div>

        <div id="nextEventIndicator" class="next-event-indicator" style="display: none;">
            <div class="next-event-title">🎯 Prochain événement</div>
            <div id="nextEventContent"></div>
        </div>

        <div class="schedule-grid" id="scheduleGrid">
            <!-- Grille générée par JavaScript -->
        </div>

        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" id="totalEvents">0</div>
                <div class="stat-label">Événements totaux</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="completedEvents">0</div>
                <div class="stat-label">Événements terminés</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="todayEvents">0</div>
                <div class="stat-label">Événements aujourd'hui</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="busyDays">0</div>
                <div class="stat-label">Jours occupés</div>
            </div>
        </div>
    </div>

    <script>
        const timeSlots = [
            '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', 
            '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'
        ];
        
        const days = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'];
        const dayLabels = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];
        
        let events = {};
        let selectedColor = 'default';
        let eventIdCounter = 0;

        const colorSchemes = {
            default: 'linear-gradient(45deg, #667eea, #764ba2)',
            red: 'linear-gradient(45deg, #ff6b6b, #ee5a52)',
            green: 'linear-gradient(45deg, #51cf66, #40c057)',
            yellow: 'linear-gradient(45deg, #ffd43b, #fab005)',
            blue: 'linear-gradient(45deg, #339af0, #228be6)',
            purple: 'linear-gradient(45deg, #845ef7, #7048e8)'
        };

        function initializeSchedule() {
            const grid = document.getElementById('scheduleGrid');
            
            // Header vide pour le coin
            grid.innerHTML = '<div class="time-header"></div>';
            
            // Headers des jours
            dayLabels.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.className = 'day-header';
                dayHeader.textContent = day;
                grid.appendChild(dayHeader);
            });
            
            // Créer les lignes de temps
            timeSlots.forEach(time => {
                // Colonne de temps
                const timeSlot = document.createElement('div');
                timeSlot.className = 'time-slot';
                timeSlot.textContent = time;
                grid.appendChild(timeSlot);
                
                // Cellules pour chaque jour
                days.forEach(day => {
                    const cell = document.createElement('div');
                    cell.className = 'schedule-cell';
                    cell.dataset.day = day;
                    cell.dataset.time = time;
                    grid.appendChild(cell);
                });
            });
        }

        function addEvent() {
            const title = document.getElementById('eventTitle').value.trim();
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            
            // Récupérer les jours sélectionnés
            const selectedDays = [];
            document.querySelectorAll('.days-selector input[type="checkbox"]:checked').forEach(checkbox => {
                selectedDays.push(checkbox.value);
            });
            
            if (!title || !startTime || !endTime) {
                alert('Veuillez remplir tous les champs');
                return;
            }
            
            if (selectedDays.length === 0) {
                alert('Veuillez sélectionner au moins un jour');
                return;
            }
            
            if (startTime >= endTime) {
                alert('L\'heure de fin doit être après l\'heure de début');
                return;
            }
            
            // Ajouter l'événement pour chaque jour sélectionné
            selectedDays.forEach(day => {
                const eventId = 'event_' + (++eventIdCounter);
                const event = {
                    id: eventId,
                    title: title,
                    startTime: startTime,
                    endTime: endTime,
                    day: day,
                    color: selectedColor,
                    completed: false
                };
                
                if (!events[day]) {
                    events[day] = [];
                }
                
                events[day].push(event);
            });
            
            // Vider le formulaire
            document.getElementById('eventTitle').value = '';
            document.getElementById('startTime').value = '';
            document.getElementById('endTime').value = '';
            
            // Décocher toutes les cases
            document.querySelectorAll('.days-selector input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });
            
            renderEvents();
            updateStats();
            updateNextEvent();
        }

        function timeToMinutes(timeStr) {
            const [hours, minutes] = timeStr.split(':').map(Number);
            return hours * 60 + minutes;
        }

        function findTimeSlotIndex(timeStr) {
            const targetTime = timeToMinutes(timeStr);
            
            for (let i = 0; i < timeSlots.length; i++) {
                const slotTime = timeToMinutes(timeSlots[i]);
                if (targetTime >= slotTime && (i === timeSlots.length - 1 || targetTime < timeToMinutes(timeSlots[i + 1]))) {
                    return i;
                }
            }
            return 0; // Par défaut, premier slot
        }

        function renderEvents() {
            // Nettoyer toutes les cellules
            document.querySelectorAll('.schedule-cell').forEach(cell => {
                cell.innerHTML = '';
            });
            
            // Obtenir le prochain événement pour le mettre en évidence
            const nextEvent = getNextEvent();
            
            // Ajouter les événements
            Object.keys(events).forEach(day => {
                events[day].forEach(event => {
                    const startTimeMinutes = timeToMinutes(event.startTime);
                    const endTimeMinutes = timeToMinutes(event.endTime);
                    const durationMinutes = endTimeMinutes - startTimeMinutes;
                    
                    // Trouver l'index du slot de temps approprié
                    const startSlotIndex = findTimeSlotIndex(event.startTime);
                    const startSlotTime = timeSlots[startSlotIndex];
                    
                    // Trouver la cellule appropriée
                    const cell = document.querySelector(`[data-day="${day}"][data-time="${startSlotTime}"]`);
                    
                    if (cell) {
                        const eventElement = document.createElement('div');
                        eventElement.className = 'event';
                        
                        // Calculer la position et la taille
                        const cellHeight = 60; // Hauteur de base d'une cellule
                        const startSlotMinutes = timeToMinutes(startSlotTime);
                        
                        // Position verticale dans la cellule (offset depuis le début du slot)
                        const offsetMinutes = startTimeMinutes - startSlotMinutes;
                        const topOffset = (offsetMinutes / 60) * cellHeight;
                        
                        // Hauteur de l'événement
                        const eventHeight = Math.max(20, (durationMinutes / 60) * cellHeight);
                        
                        // Appliquer les styles de position
                        eventElement.style.top = `${topOffset}px`;
                        eventElement.style.height = `${eventHeight}px`;
                        
                        // Appliquer les styles selon l'état
                        if (event.completed) {
                            eventElement.classList.add('completed');
                        } else {
                            eventElement.style.background = colorSchemes[event.color];
                        }
                        
                        // Marquer le prochain événement
                        if (nextEvent && nextEvent.id === event.id) {
                            eventElement.classList.add('next-event');
                        }
                        
                        eventElement.innerHTML = `
                            <input type="checkbox" class="event-checkbox" ${event.completed ? 'checked' : ''} 
                                   onchange="toggleEventCompletion('${event.id}', '${day}')">
                            <div class="event-content">
                                <div class="event-title">${event.title}</div>
                                <div class="event-time">${event.startTime} - ${event.endTime}</div>
                            </div>
                            <button class="event-delete" onclick="deleteEvent('${event.id}', '${day}')">×</button>
                        `;
                        
                        cell.appendChild(eventElement);
                    }
                });
            });
        }

        function deleteEvent(eventId, day) {
            events[day] = events[day].filter(event => event.id !== eventId);
            if (events[day].length === 0) {
                delete events[day];
            }
            renderEvents();
            updateStats();
            updateNextEvent();
        }

        function toggleEventCompletion(eventId, day) {
            const event = events[day].find(e => e.id === eventId);
            if (event) {
                event.completed = !event.completed;
                renderEvents();
                updateStats();
                updateNextEvent();
            }
        }

        function clearSchedule() {
            if (confirm('Êtes-vous sûr de vouloir effacer tout l\'emploi du temps ?')) {
                events = {};
                renderEvents();
                updateStats();
                updateNextEvent();
            }
        }

        function updateStats() {
            const totalEvents = Object.values(events).reduce((sum, dayEvents) => sum + dayEvents.length, 0);
            const completedEvents = Object.values(events).reduce((sum, dayEvents) => 
                sum + dayEvents.filter(event => event.completed).length, 0);
            const busyDays = Object.keys(events).length;
            
            // Simuler "aujourd'hui" avec lundi
            const todayEvents = events['lundi'] ? events['lundi'].length : 0;
            
            document.getElementById('totalEvents').textContent = totalEvents;
            document.getElementById('completedEvents').textContent = completedEvents;
            document.getElementById('todayEvents').textContent = todayEvents;
            document.getElementById('busyDays').textContent = busyDays;
        }

        function getNextEvent() {
            const now = new Date();
            const currentDay = now.getDay(); // 0 = dimanche, 1 = lundi, etc.
            const currentTime = now.getHours() * 60 + now.getMinutes(); // Minutes depuis minuit
            
            const dayOrder = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
            const currentDayName = dayOrder[currentDay];
            
            let nextEvent = null;
            let minTimeDiff = Infinity;
            
            // Parcourir tous les événements
            Object.keys(events).forEach(day => {
                events[day].forEach(event => {
                    if (event.completed) return; // Ignorer les événements terminés
                    
                    const eventTime = parseInt(event.startTime.split(':')[0]) * 60 + 
                                    parseInt(event.startTime.split(':')[1]);
                    
                    let dayIndex = dayOrder.indexOf(day);
                    let timeDiff;
                    
                    if (dayIndex === currentDay) {
                        // Même jour
                        if (eventTime > currentTime) {
                            timeDiff = eventTime - currentTime;
                        } else {
                            timeDiff = (7 * 24 * 60) + eventTime - currentTime; // Semaine suivante
                        }
                    } else {
                        // Autre jour
                        let dayDiff = dayIndex - currentDay;
                        if (dayDiff < 0) dayDiff += 7; // Semaine suivante
                        
                        timeDiff = (dayDiff * 24 * 60) + eventTime - currentTime;
                    }
                    
                    if (timeDiff < minTimeDiff) {
                        minTimeDiff = timeDiff;
                        nextEvent = {...event, day: day, timeDiff: timeDiff};
                    }
                });
            });
            
            return nextEvent;
        }

        function updateNextEvent() {
            const nextEvent = getNextEvent();
            const indicator = document.getElementById('nextEventIndicator');
            const content = document.getElementById('nextEventContent');
            
            if (nextEvent) {
                const dayNames = {
                    'lundi': 'Lundi',
                    'mardi': 'Mardi', 
                    'mercredi': 'Mercredi',
                    'jeudi': 'Jeudi',
                    'vendredi': 'Vendredi',
                    'samedi': 'Samedi',
                    'dimanche': 'Dimanche'
                };
                
                // Calculer le temps restant
                const hours = Math.floor(nextEvent.timeDiff / 60);
                const minutes = nextEvent.timeDiff % 60;
                let timeText;
                
                if (hours < 1) {
                    timeText = `dans ${minutes} minute${minutes > 1 ? 's' : ''}`;
                } else if (hours < 24) {
                    timeText = `dans ${hours}h${minutes > 0 ? minutes + 'm' : ''}`;
                } else {
                    const days = Math.floor(hours / 24);
                    const remainingHours = hours % 24;
                    timeText = `dans ${days} jour${days > 1 ? 's' : ''} ${remainingHours > 0 ? remainingHours + 'h' : ''}`;
                }
                
                content.innerHTML = `
                    <div><strong>${nextEvent.title}</strong></div>
                    <div>${dayNames[nextEvent.day]} ${nextEvent.startTime} - ${nextEvent.endTime}</div>
                    <div class="next-event-time">${timeText}</div>
                `;
                
                indicator.style.display = 'block';
            } else {
                indicator.style.display = 'none';
            }
        }

        function saveSchedule() {
            const scheduleData = {
                events: events,
                eventIdCounter: eventIdCounter,
                savedAt: new Date().toISOString(),
                version: "1.0"
            };
            
            const dataStr = JSON.stringify(scheduleData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `emploi-du-temps-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            // Nettoyer l'URL
            setTimeout(() => URL.revokeObjectURL(link.href), 100);
            
            alert('Emploi du temps sauvegardé avec succès !');
        }

        function loadSchedule(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            if (file.type !== 'application/json') {
                alert('Veuillez sélectionner un fichier JSON valide');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const scheduleData = JSON.parse(e.target.result);
                    
                    // Vérifier la structure des données
                    if (!scheduleData.events || typeof scheduleData.events !== 'object') {
                        throw new Error('Format de fichier invalide');
                    }